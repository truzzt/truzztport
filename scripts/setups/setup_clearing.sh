#!/bin/bash
#
# Shell Script to setup clearing
# Author: truzzt GmbH
# Copyright 2023

# Set environment variables
common_name_subca="$TRUZZTPORT_ENV_SLUG.$TRUZZTPORT_CA_COMMON_NAME"
common_name="$TRUZZTPORT_CA_COMMON_NAME"
organization_name="$TRUZZTPORT_CA_ORGANIZATION_NAME"
country_name="$TRUZZTPORT_CA_COUNTRY_NAME"
unit_name="$TRUZZTPORT_CA_UNIT_NAME"

# Define the allow-all-flow.pl contents
allow_all_flows_contents=$(cat <<EOL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Prolog representation of a data flow policy
%   
%   Source: default
%
%       Do not edit this file, it has been generated automatically
%       by XText/Xtend.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Only required for SWI-Prolog
% Allow the following predicates to be scattered around the prolog file.
% Otherwise Prolog will issue a warning if they are not stated in subsequent lines.
%:- discontiguous service/1.
%:- discontiguous has_endpoint/2.
%:- discontiguous creates_label/2.
%:- discontiguous removes_label/2.
%:- discontiguous rule/1.
%:- discontiguous rule_priority/2.
%:- discontiguous receives_label/1.
%:- discontiguous has_decision/2.
%:- discontiguous has_target/2.
%:- discontiguous has_capability/2.
%:- discontiguous has_property/3.
%:- discontiguous requires_prerequisites/2.
%:- discontiguous has_alternativedecision/2.
%:- discontiguous has_obligation/2.

%%%%%%%%% Basic Blocking Rule %%%%%%%%%%
rule(dropAll).
rule_priority(dropAll,0).
has_decision(dropAll,drop).
receives_label(dropAll).
has_target(dropAll,serviceAll).

%%%%%%%%%% Catch All Service %%%%%%%%%%%
service(serviceAll).
has_endpoint(serviceAll,'.*').

%%%%%%%%%%%%%%%% Rules %%%%%%%%%%%%%%%%%
% Allow everything
rule(allowAll).
rule_priority(allowAll, 1).
has_target(allowAll, serviceAll).
receives_label(allowAll).
has_decision(allowAll, allow).
EOL
)

# Define the clearing-house-routes-xml contents
clearing_house_routes_contents=$(cat <<EOL
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          https://www.springframework.org/schema/beans/spring-beans.xsd
          http://camel.apache.org/schema/spring
          https://camel.apache.org/schema/spring/camel-spring-3.16.0.xsd">

    <camel:sslContextParameters id="ChSslContext">
        <camel:keyManagers keyPassword="password">
            <camel:keyStore resource="etc/keystore.p12" password="password"/>
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore resource="etc/truststore.p12" password="password"/>
        </camel:trustManagers>
    </camel:sslContextParameters>

    <!-- Beans -->
    <bean id="CHOutputProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseOutputProcessor" />
    <bean id="MultipartOutputProcessor" class="de.fhg.aisec.ids.clearinghouse.MultipartOutputProcessor" />
    <bean id="InfoModelParsingProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseInfomodelParsingProcessor" />
    <bean id="TokenValidationProcessor" class="de.fhg.aisec.ids.clearinghouse.TokenValidationProcessor" />
    <bean id="idscp2Processor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseIdscp2InputProcessor" />
    <bean id="Idscp2ErrorHandler" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseExceptionProcessor" />
    <bean id="MultipartInputProcessor" class="de.fhg.aisec.ids.camel.multipart.MultiPartInputProcessor" />
    <bean id="TypeExtractionProcessor" class="de.fhg.aisec.ids.camel.processors.IdsMessageTypeExtractionProcessor" />

    <!-- Routes -->
    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <restConfiguration scheme="http" component="jetty" host="0.0.0.0" port="9999" bindingMode="off"/>

        <rest id="CH_REST">
            <post path="/messages/query/{pid}" id="CH_QUERY_PID">
                <to uri="direct:multipart" />
            </post>
            <post path="/messages/query/{pid}/{id}" id="CH_QUERY_PID_ID">
                <to uri="direct:multipart" />
            </post>
            <post path="/messages/log/{pid}" id="CH_LOG_PID">
                <to uri="direct:multipart" />
            </post>
            <post path="/process/{pid}" id="CH_CREATE_PID">
                <to uri="direct:multipart" />
            </post>
        </rest>
        <route id="CH_MULTIPART_ROUTE">
            <from uri="direct:multipart"/>
            <onException>
                <exception>java.io.IOException</exception>
                <exception>java.lang.SecurityException</exception>
                <exception>java.lang.IllegalArgumentException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <transform><simple>\${exception.message}</simple></transform>
                <log message="### Handle \${exception.class} ###"/>
                <log message="### Handle \${exception.cause} ###"/>
                <log message="### Handle \${exception.stacktrace} ###"/>
                <removeHeader name="idsMultipartHeader"/>
                <removeHeader name="pid"/>
                <choice>
                    <when>
                        <simple>\${exception.class} == 'java.lang.SecurityException' || \${exception.class} == 'java.lang.IllegalArgumentException'</simple>
                        <setHeader name="CamelHttpResponseCode"><simple>401</simple></setHeader>
                    </when>
                    <when>
                        <simple>\${exception.class} == 'java.io.IOException'</simple>
                        <setHeader name="CamelHttpResponseCode"><simple>400</simple></setHeader>
                    </when>
                    <otherwise>
                        <setHeader name="CamelHttpResponseCode"><simple>500</simple></setHeader>
                        <transform><constant>Internal Server Error</constant></transform>
                    </otherwise>
                </choice>
            </onException>
            <process ref="MultipartInputProcessor" />
            <process ref="InfoModelParsingProcessor" />
            <process ref="TokenValidationProcessor" />
            <to uri="http://logging:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
            <process ref="CHOutputProcessor" />
            <process ref="MultipartOutputProcessor" />
        </route>
        <route id="CH_IDSCP2_ROUTE">
            <from uri="idscp2server://0.0.0.0:29292?sslContextParameters=#ChSslContext&amp;useIdsMessages=true&amp;copyHeadersRegex=%28ch-ids-%5Ba-z%5D%2A%7CContent-Type%29"/>
            <onException>
                <exception>java.io.IOException</exception>
                <exception>java.lang.SecurityException</exception>
                <exception>java.lang.IllegalArgumentException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="### Handle \${exception.class} ###"/>
                <removeHeader name="idsMultipartHeader"/>
                <removeHeader name="pid"/>
                <process ref="Idscp2ErrorHandler"/>
            </onException>
            <process ref="TypeExtractionProcessor"/>
            <choice>
                <when>
                    <simple>\${exchangeProperty.ids-type} == 'RequestMessage'</simple>
                    <log message="### Handle RequestMessage ###"/>
                    <setHeader name="CamelHttpMethod"><simple>POST</simple></setHeader>
                    <setHeader name="CamelHttpPath"><simple>/process/\${headers.ch-ids-pid}</simple></setHeader>
                    <process ref="idscp2Processor"/>
                    <process ref="TokenValidationProcessor" />
                    <to uri="http://logging:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                    <process ref="CHOutputProcessor" />
                </when>
                <when>
                    <simple>\${exchangeProperty.ids-type} == 'QueryMessage'</simple>
                    <log message="### Handle QueryMessage ###"/>
                    <setHeader name="CamelHttpMethod"><simple>POST</simple></setHeader>
                    <setHeader name="CamelHttpPath"><simple>/messages/query/\${headers.ch-ids-pid}</simple></setHeader>
                    <process ref="idscp2Processor"/>
                    <process ref="TokenValidationProcessor" />
                    <to uri="http://logging:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                    <process ref="CHOutputProcessor" />
                </when>
                <when>
                    <simple>\${exchangeProperty.ids-type} == 'LogMessage'</simple>
                    <log message="### Handle LogMessage ###"/>
                    <setHeader name="CamelHttpMethod"><simple>POST</simple></setHeader>
                    <setHeader name="CamelHttpPath"><simple>/messages/log/\${headers.ch-ids-pid}</simple></setHeader>
                    <process ref="idscp2Processor"/>
                    <process ref="TokenValidationProcessor" />
                    <to uri="http://logging:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                    <process ref="CHOutputProcessor" />
                </when>
                <otherwise>
                    <log loggingLevel="ERROR" message="### Server received unexpected message (otherwise branch):\n\${body}\n### Header: ###\n\${headers[idscp2-header]}"/>
                    <removeHeader name="idscp2-header" />
                    <setBody><simple>\${null}</simple></setBody>
                </otherwise>
            </choice>
        </route>
    </camelContext>
</beans>
EOL
)

# Define the document_rocket contents
document_rocket_contents=$(cat <<EOL
[global]
limits = { json = 5242880 }
daps_api_url = "https://daps.$common_name_subca"

[debug]
address = "0.0.0.0"
port = 8001
log_level = "normal"
limits = { forms = 32768 }
database_url = "mongodb://mongo:27017"
keyring_api_url = "http://keyring:8002"
clear_db = true

[release]
address = "0.0.0.0"
port = 8001
log_level = "normal"
limits = { forms = 32768 }
database_url = "mongodb://mongo:27017"
keyring_api_url = "http://keyring:8002"
clear_db = false
EOL
)

# Define the keyring_rocket contents
keyring_rocket_contents=$(cat <<EOL
[global]
limits = { json = 5242880 }
daps_api_url = "https://daps.$common_name_subca"

[debug]
address = "0.0.0.0"
port = 8002
log_level = "normal"
limits = { forms = 32768 }
database_url = "mongodb://mongo:27018"
clear_db = true

[release]
address = "0.0.0.0"
port = 8002
log_level = "normal"
limits = { forms = 32768 }
database_url = "mongodb://mongo:27017"
clear_db = false
EOL
)

# Define the logging_rocket contents
logging_rocket_contents=$(cat <<EOL
[global]
limits = { json = 5242880 }
daps_api_url = "https://daps.$common_name_subca"
connector_name = "https://clearing.$common_name_subca"
infomodel_version = "4.0.0"
server_agent = "https://clearing.$common_name_subca"
signing_key = "keys/private_key.der"

[debug]
address = "0.0.0.0"
port = 8000
log_level = "normal"
limits = { forms = 32768 }
database_url = "mongodb://mongo:27019"
keyring_api_url = "http://keyring:8002"
document_api_url = "http://document:8001"
clear_db = true

[release]
address = "0.0.0.0"
port = 8000
log_level = "normal"
limits = { forms = 32768 }
database_url = "mongodb://mongo:27017"
keyring_api_url = "http://keyring:8002"
document_api_url = "http://document:8001"
clear_db = false
EOL
)

# Create the files
echo "$allow_all_flows_contents" > $PWD/data/$TRUZZTPORT_ENV_SLUG/clearing/allow-all-flow.pl
echo "$clearing_house_routes_contents" > $PWD/data/$TRUZZTPORT_ENV_SLUG/clearing/clearing-house-routes.xml
echo "$document_rocket_contents" > $PWD/data/$TRUZZTPORT_ENV_SLUG/clearing/Rocket-document.toml
echo "$keyring_rocket_contents" > $PWD/data/$TRUZZTPORT_ENV_SLUG/clearing/Rocket-keyring.toml
echo "$logging_rocket_contents" > $PWD/data/$TRUZZTPORT_ENV_SLUG/clearing/Rocket-logging.toml

# Generate client certificate
source scripts/setups/setup_client.sh "clearing.$common_name_subca" "$country_name" "$organization_name" "$unit_name"
cp $PWD/data/cert/${client_name}.p12 $PWD/data/$TRUZZTPORT_ENV_SLUG/clearing/keystore.p12
